{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","list","createList","filter","setFilter","useEffect","axios","get","then","response","data","catch","error","console","log","updateFilter","e","filterType","target","dataset","className","length","data-filter-type","onClick","map","item","index","date","split","key","name","src","image","alt","rating","tasting_notes","href","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6QA8DeA,MA1Df,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,KAIbC,qBAAU,WAERC,IACGC,IADH,+CAC+CJ,IAC5CK,MAAK,SAAAC,GAAQ,OAAIP,EAAWO,EAASC,SACrCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC3BJ,MAAK,iBAGP,CAACL,IAEJ,IAAMY,EAAe,SAAAC,GACnB,IAAMC,EAAaD,EAAEE,OAAOC,QAAQF,WACpCJ,QAAQC,IAAIE,EAAEE,OAAOC,QAAQF,YAC7Bb,EAAUa,IAGZ,OACE,yBAAKG,UAAU,OACb,gCACE,8DACA,2BAAG,oCAAH,IAAiBnB,EAAKoB,QACtB,4BAAQC,mBAAiB,GAAGC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAAzD,SACA,4BAAQM,mBAAiB,SAASC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA/D,UACA,4BAAQM,mBAAiB,QAAQC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA9D,SACA,4BAAQM,mBAAiB,YAAYC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAAlE,cAEF,8BACGf,EAAKoB,QAAUpB,EAAKuB,KAAI,SAACC,EAAMC,GAE9B,IAAMC,EAAOF,EAAKE,KAAKC,MAAM,KAAK,GAClC,OACE,yBACEC,IAAG,UAAKJ,EAAKK,KAAV,YAAkBJ,GACrBN,UAAU,kBAEZ,yBAAKA,UAAU,yBACb,yBAAKW,IAAKN,EAAKO,MAAOC,IAAI,SAE5B,yBAAKb,UAAU,wBACb,4BAAI,oCAAJ,IAAkBK,EAAKK,MACvB,2BAAG,sCAAH,IAAmBL,EAAKS,QACxB,2BAAG,uCAAH,IAAoBT,EAAKU,eACzB,uBAAGf,UAAU,QAAO,sCAApB,IAAmC,uBAAGgB,KAAMX,EAAKY,KAAMZ,EAAKK,OAC5D,uBAAGV,UAAU,QAAO,0CAApB,IAAwCO,WCxClCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMyC,c","file":"static/js/main.1765204b.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [list, createList] = useState([]);\n  const [filter, setFilter] = useState('')\n\n  useEffect(() => {\n    // Make a request for a user with a given ID\n    axios\n      .get(`https://ice-creams-api.herokuapp.com/${filter}`)\n      .then(response => createList(response.data))\n      .catch(error => console.log(error))\n      .then(function () {\n        // always executed\n    });\n  }, [filter]);\n\n  const updateFilter = e => {\n    const filterType = e.target.dataset.filterType\n    console.log(e.target.dataset.filterType)\n    setFilter(filterType)\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Quarnatine Ice Cream Challenge</h1>\n        <p><b>Total</b> {list.length}</p>\n        <button data-filter-type=\"\" onClick={(e) => updateFilter(e)}>Reset</button>\n        <button data-filter-type=\"recent\" onClick={(e) => updateFilter(e)}>Recent</button>\n        <button data-filter-type=\"worst\" onClick={(e) => updateFilter(e)}>Worst</button>\n        <button data-filter-type=\"favourite\" onClick={(e) => updateFilter(e)}>Favourite</button>\n      </header>\n      <main>\n        {list.length && list.map((item, index) => {\n\n          const date = item.date.split('T')[0]\n          return (\n            <div\n              key={`${item.name}-${index}`}\n              className=\"ice-cream-card\"\n            >\n            <div className=\"ice-cream-card__image\">\n              <img src={item.image} alt='alt'/>\n            </div>\n            <div className=\"ice-cream-card__text\">\n              <h4><b>Name:</b> {item.name}</h4>\n              <p><b>Rating:</b> {item.rating}</p>\n              <p><b>DG Says:</b> {item.tasting_notes}</p>\n              <p className=\"meta\"><b>Website</b> <a href={item.url}>{item.name}</a></p>\n              <p className=\"meta\"><b>Scoff Date:</b> {date}</p>\n            </div>\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["icecream-loading.gif","Loading.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","src","loadingGif","alt","App","useState","list","setList","filter","setFilter","isLoaded","setIsLoaded","useEffect","axios","get","then","response","data","timer","setTimeout","clearTimeout","catch","error","console","log","key","sort","sorted","a","b","reverse","sortArray","updateFilter","e","sortType","target","dataset","filterType","length","data-filter-type","onClick","map","item","index","date","split","name","image","rating","tasting_notes","href","url","categories","category","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,8C,kMCY5BC,MARf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAKC,IAAYC,IAAI,c,uBCwFjBC,MA1Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGmBJ,oBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KAKbC,qBAAU,WACRC,IACGC,IAAI,yCACJC,MAAK,SAAAC,GACJT,EAAQS,EAASC,MACjB,IAAMC,EAAQC,YAAW,WACvBR,GAAY,KACX,MACH,OAAO,kBAAMS,aAAaF,OAE3BG,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAC3BP,MAAK,iBAGP,IAEHH,qBAAU,YACU,SAAAa,GAChB,IAAIC,EAAOD,EACC,UAARA,IACFC,EAAO,QAET,IAAMC,EAAS,YAAIrB,GAAMoB,MAAK,SAACE,EAAGC,GAAJ,OAAUA,EAAEH,GAAQE,EAAEF,IAAS,EAAIG,EAAEH,GAAQE,EAAEF,GAAQ,EAAI,KAC5E,SAARD,GAA0B,UAARA,IACrBF,QAAQC,IAAI,SACZG,EAAOG,WAETvB,EAAQoB,GAGVI,CAAUvB,KAET,CAACA,EAAQD,IAIZ,IAAMyB,EAAe,SAAAC,GACnB,IAAMC,EAAWD,EAAEE,OAAOC,QAAQC,WAClC5B,EAAUyB,IAGZ,OAAOxB,EACL,yBAAKV,UAAU,OACb,gCACE,8DACA,2BAAG,oCAAH,IAAiBM,EAAKgC,QACtB,yBAAKtC,UAAU,kBACb,4BAAQuC,mBAAiB,QAAQC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA9D,SACA,4BAAQM,mBAAiB,OAAOC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA7D,OACA,4BAAQM,mBAAiB,OAAOC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA7D,UACA,4BAAQM,mBAAiB,SAASC,QAAS,SAACP,GAAD,OAAOD,EAAaC,KAA/D,eAGJ,8BACG3B,EAAKgC,QAAUhC,EAAKmC,KAAI,SAACC,EAAMC,GAE9B,IAAMC,EAAOF,EAAKE,KAAKC,MAAM,KAAK,GAClC,OACE,yBACEpB,IAAG,UAAKiB,EAAKI,KAAV,YAAkBH,GACrB3C,UAAU,kBAEZ,yBAAKA,UAAU,yBACb,yBAAKC,IAAKyC,EAAKK,MAAO5C,IAAI,SAE5B,yBAAKH,UAAU,wBACb,4BAAI,oCAAJ,IAAkB0C,EAAKI,MACvB,2BAAG,sCAAH,IAAmBJ,EAAKM,QACxB,2BAAG,uCAAH,IAAoBN,EAAKO,eACzB,uBAAGjD,UAAU,QAAO,sCAApB,IAAmC,uBAAGkD,KAAMR,EAAKS,KAAMT,EAAKI,OAC5D,uBAAG9C,UAAU,QAAO,0CAApB,IAAwC4C,GACxC,yBAAK5C,UAAU,YACZ0C,EAAKU,WAAWX,KAAI,SAAAY,GACnB,OAAO,0BAAM5B,IAAK4B,GAAWA,cASzC,kBAAC,EAAD,OChFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+C,c","file":"static/js/main.a6ca8e0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icecream-loading.738d3b63.gif\";","import React from 'react';\nimport loadingGif from './icecream-loading.gif'; // Tell webpack this JS file uses this image\n\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <img src={loadingGif} alt=\"Loading\"/>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, {useState, useEffect} from 'react';\nimport Loading from './Loading';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get('https://ice-creams-api.herokuapp.com/')\n      .then(response => {\n        setList(response.data)\n        const timer = setTimeout(() => {\n          setIsLoaded(true)\n        }, 1200);\n        return () => clearTimeout(timer);\n      })\n      .catch(error => console.log(error))\n      .then(function () {\n        // always executed\n    });\n  }, []);\n\n  useEffect(() => {\n    const sortArray = key => {\n      let sort = key\n      if (key === 'reset') {\n        sort = 'date';\n      }\n      const sorted = [...list].sort((a, b) => b[sort] < a[sort] ? -1 : b[sort] > a[sort] ? 1 : 0);\n      if ( key === 'name' || key === 'reset' ) {\n        console.log('reset')\n        sorted.reverse();\n      }\n      setList(sorted);\n    };\n\n    sortArray(filter);\n\n  }, [filter, setList]);\n\n\n\n  const updateFilter = e => {\n    const sortType = e.target.dataset.filterType\n    setFilter(sortType)\n  }\n\n  return isLoaded ? (\n    <div className=\"App\">\n      <header>\n        <h1>Quarnatine Ice Cream Challenge</h1>\n        <p><b>Total</b> {list.length}</p>\n        <div className=\"header-buttons\">\n          <button data-filter-type=\"reset\" onClick={(e) => updateFilter(e)}>Reset</button>\n          <button data-filter-type=\"name\" onClick={(e) => updateFilter(e)}>A-Z</button>\n          <button data-filter-type=\"date\" onClick={(e) => updateFilter(e)}>Recent</button>\n          <button data-filter-type=\"rating\" onClick={(e) => updateFilter(e)}>Favourite</button>\n        </div>\n      </header>\n      <main>\n        {list.length && list.map((item, index) => {\n\n          const date = item.date.split('T')[0]\n          return (\n            <div\n              key={`${item.name}-${index}`}\n              className=\"ice-cream-card\"\n            >\n            <div className=\"ice-cream-card__image\">\n              <img src={item.image} alt='alt'/>\n            </div>\n            <div className=\"ice-cream-card__text\">\n              <h4><b>Name:</b> {item.name}</h4>\n              <p><b>Rating:</b> {item.rating}</p>\n              <p><b>DG Says:</b> {item.tasting_notes}</p>\n              <p className=\"meta\"><b>Website</b> <a href={item.url}>{item.name}</a></p>\n              <p className=\"meta\"><b>Scoff Date:</b> {date}</p>\n              <div className=\"category\">\n                {item.categories.map(category => {\n                  return <span key={category}>{category}</span>\n                })}\n              </div>\n            </div>\n            </div>\n          )\n        })}\n      </main>\n    </div>\n  ) : <Loading />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}